<% const { apiRoutes, importList } = it; %>

import { <%~ it.importList.join(', ') %> } from './Api';
import * as hasuraSdk from "@hasura/ndc-lambda-sdk"

const api = new Api({

});

<% const capitalizeFirstLetter = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

const hasParams = (route) => {
  return (route.allParams && route.allParams.length > 0)
}

const getParameterAsFunctionParam = (param) => { // parameter accepted by the funciton in function.ts
  if (param.required) {
    return `${param.name}: ${param.tsType},`
  } else {
    return `${param.name}?: ${param.tsType},`
  }
}
%>

<% for (let req of apiRoutes) {
  // const functionName = `get${capitalizeFirstLetter(req.namespace)}${capitalizeFirstLetter(req.routeName.original)}`;
%>
/**
 <% if (req.shouldAllowRelaxedTypes) { %> * @allowrelaxedtypes <% } %>

 <% if (req.isQuery) { %> * @readonly <% } %>

 * <%~ req.description %>
 */
<% if (!hasParams(req)) { %>export async function <%~ req.functionName %>(): <% } %>
<%else{%>
export async function <%~ req.functionName %>(

<% for (parameter of req.allParams) {%>
  /** <%~parameter.description %> */
  <%~getParameterAsFunctionParam(parameter) %>

<% } %>
):
<% } %>
Promise<% if (req.shouldWrapReturnResultInJSON) { -%>
<hasuraSdk.JSONValue>
  <% } else { %>
<<%~ req.successType%>>
    <% } %>
{
  <% if (!hasParams(req)) { %>
const result = await api.<%~ req.namespace %>.<%~ req.apiFunction %>({});
  <% } else { %>
const result = await api.<%~ req.namespace %>.<%~ req.apiFunction %>({
<% if (req.queryParams && req.queryParams.length > 0) { %>
    query: {
    <% for (const q of req.queryParams) { %>
    <%~q.name%>: <%~q.name%>,
    <% } %>
  },
    <% } %>
<% if (req.allParams && req.allParams.length > 0) { %>
    <% for (const q of req.allParams) { %>
      <% if (q.paramType !== 'query') { %>
        <%~q.name%>: <%~q.name%>,
        <% } %>
    <% } %>
<% } %>
    });
  <% } %>
if (result.data) {
    return <% if (req.shouldWrapReturnResultInJSON) { -%>
      new hasuraSdk.JSONValue(result.data);
  <% } else { %>
    result.data
    <% } %>
  } else {
    throw (result.error)
  }
}
<% } %>
