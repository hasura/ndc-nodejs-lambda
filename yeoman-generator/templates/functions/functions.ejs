<% const { apiRoutes, importList } = it; %>

import { <%= it.importList.join(', ') %> } from './Api';
import * as sdk from "@hasura/ndc-lambda-sdk"

const api = new Api({

});

<% const capitalizeFirstLetter = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

const hasParams = (route) => {
  return (route.queryParams && route.queryParams.length > 0)
    || (route.pathParams && route.pathParams.length > 0)
}

const getParameterAsFunctionParam = (param) => { // parameter accepted by the funciton in function.ts
  if (param.required) {
    return `${param.name}: ${param.tsType},`
  } else {
    return `${param.name}?: ${param.tsType},`
  }
}
%>

<% for (let req of apiRoutes) {
  // const functionName = `get${capitalizeFirstLetter(req.namespace)}${capitalizeFirstLetter(req.routeName.original)}`;
%>
/**
 * @readonly
 * <%= req.description %>
 */
<% if (!hasParams(req)) { %>export async function <%= req.functionName %>(): Promise<<%= req.successType%>> { <% } %>
<%else{%>
export async function <%= req.functionName %>(
<% for (parameter of req.queryParams) {%>
  /** <%=parameter.description %> */
  <%=getParameterAsFunctionParam(parameter) %>

<% } %>
<% for (parameter of req.pathParams) {%>
  /** <%=parameter.description %> */
  <%=getParameterAsFunctionParam(parameter) %>

<% } %>
): Promise<<%= req.successType%>> {
<% } %>
  <% if (!hasParams(req)) { %>
const result = await api.<%= req.namespace %>.<%= req.apiFunction %>();
  <% } else { %>
const result = await api.<%= req.namespace %>.<%= req.apiFunction %>(
<% if (req.queryParams && req.queryParams.length > 0) { %>
    {
    <% for (const q of req.queryParams) { %>
    <%=q.name%>: <%=q.name%>,
    <% } %>
  },
    <% } %>
<% if (req.pathParams && req.pathParams.length > 0) { %>
    <% for (const q of req.pathParams) { %>
    <%=q.name%>: <%=q.name%>,
    <% } %>
<% } %>
);
  <% } %>
if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}
<% } %>
